package io.banking.whatsapp.accounts.domain;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Entity class representing a bank account in the banking WhatsApp system. This
 * class maps to the 'accounts' collection in MongoDB and includes all necessary
 * fields to track account information and status.
 *
 * @author Marcelo Alejandro Albarrac√≠n
 * @email marceloalejandro.albarracin@gmail.com
 * @version 1.0.0
 * @since 2024-03-19
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Document(collection = "accounts")
public class Account {

	/**
	 * The unique identifier for the account. Automatically generated by MongoDB.
	 */
	@Id
	private String id;

	/**
	 * The account number. Must be unique in the system.
	 */
	@Indexed(unique = true)
	private String accountNumber;

	/**
	 * The type of account. Possible values: SAVINGS, CHECKING, CREDIT
	 */
	private AccountType accountType;

	/**
	 * The current balance of the account.
	 */
	private BigDecimal balance;

	/**
	 * The currency of the account. ISO 4217 currency code (e.g., USD, EUR)
	 */
	private String currency;

	/**
	 * The user ID that owns this account. References the User entity.
	 */
	@Indexed
	private String userId;

	/**
	 * The national identification number (DNI) of the user who owns this account.
	 * Used for user identification and account lookup.
	 */
	private String userDni;

	/**
	 * The phone number of the user who owns this account. Used for WhatsApp
	 * communication and account lookup. Format should include country code (e.g.,
	 * +1234567890).
	 */
	private String userPhoneNumber;

	/**
	 * The current status of the account.
	 */
	private AccountStatus status;

	/**
	 * Timestamp when the account was created. Automatically set during account
	 * creation.
	 */
	private LocalDateTime createdAt;

	/**
	 * Timestamp of the last update to account information. Automatically updated
	 * when account data is modified.
	 */
	private LocalDateTime updatedAt;

	/**
	 * Creates a test instance of Account with default values. This method should
	 * only be used for testing purposes.
	 *
	 * @param id the ID to set for the test account
	 * @return an Account instance with default test values
	 */
	public static Account createTestAccount(String id) {
		return new Account(id, "1234567890", AccountType.SAVINGS, new BigDecimal("1000.00"), "USD", "user123",
				"12345678", "+1234567890", AccountStatus.ACTIVE, // Changed from String to enum
				LocalDateTime.now(), LocalDateTime.now());
	}
}